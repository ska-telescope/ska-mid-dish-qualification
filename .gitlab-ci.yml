image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CI_POETRY_VERSION: 1.8.2

stages:
  - lint
  - build
  - test
  - scan
  - publish
  - pages

include:
  # Python packages build,lint, test and publish
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"

  # Jupyter Notebooks
  # - project: "ska-telescope/templates-repository"
  #   file: "gitlab-ci/includes/notebook.gitlab-ci.yml"

  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"

  # Build and publish changelog
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"

  # Create Gitlab CI badges from CI metrics
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"

python-test:
  before_script:
    - sudo apt-get update && sudo apt-get xvfb --fix-missing -y
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - "make help | grep python-test"
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ -f pyproject.toml ]]; then
        if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
          echo "python-test: Updating poetry to $CI_POETRY_VERSION";
          time poetry self update $CI_POETRY_VERSION;
        fi;

        echo "python-test: Installing with poetry";
        time poetry install --all-extras;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;
